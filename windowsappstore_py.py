# -*- coding: utf-8 -*-
"""windowsappstore_py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mVf0nBlAMeVcFUqY7xM0VPVcXnZ5XkEM

# **Sistem Rekomendasi: Rekomendasi Aplikasi Windows App Store**

Oleh: Dicky Arya Pratama

Proyek Submission 2 - Machine Learning Terapan Dicoding

# **Pendahuluan**

Pada proyek ini, sistem yang buat adalah sistem rekomendasi aplikasi microsoft windows app store menggunakan content based filtering.

# **1. Mengimport library yang di butuhkan**
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import KNNImputer
import plotly.express as px
from plotly.offline import iplot
import missingno as msno
from sklearn.neighbors import NearestNeighbors
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import calinski_harabasz_score, davies_bouldin_score

"""# **2. Mempersiapkan dataset**

![Sampul Dataset](https://i.ibb.co/rMYjQQX/download.png)

**2.1 Menupload dataset langsung ke storage google colab dalam bentuk sudah di extract/berformat CSV**

---

file dataset sudah tersimpan di directory /content/windows_store.csv

Informasi Dataset 

Sumber = https://www.kaggle.com/vishnuvarthanrao/windows-store

Lisensi = CC0: Public Domain

Kategori = Business, arts and entertaiment, computer science, software

Rating Penggunaan = 10.0

Jenis dan ukuran berkas = CSV(300kb)

# **3. Pemahaman Data**

**3.1 Memuat data pada dataframe di variable df dari file windows_store.csv**
"""

df = pd.read_csv("/content/windows_store.csv")

# melihat isi dataset
df

#melihat jumlah data dari dataset
print('Jumlah data apps di windows store pada dataset: ', len(df.Name.unique()))

"""**3.1 Menguraikan variable-variable pada dataset windows_store.csv**"""

df.info()

# melihat banyak data dan jenis-jenis category pada dataset
print('Banyak data: ', len(df.Name.unique()))
print('Jenis category yang ada: ', df.Category.unique())

# mencek value yang kosong pada dataset
df.isna().sum()

# melihat shape pada dataset windows_store.csv
df.shape

# visualisasi data kosong pada dataset, karna sedikit jadi tidak terlihat 
sorted_null = msno.nullity_sort(df, sort='ascending') 
figures = msno.matrix(sorted_null, color=(1, 0.43, 0.43))

"""# **4. Persiapan data**

**4.1 Pembersihan/penyesuaian data pada setiap kolom**

**4.1.1 Kolom rating**
"""

# Melihat value yang unik pada kolom rating di dataset
df['Rating'].unique()

# Mencari baris yang kosong dengan print value boolean df.isna()
print(df.isna())

# Melakukan penghapusan baris pada index 5321 karna value nya kosong
df.drop(df.index[5321], axis=0, inplace=True)

# Mencek lagi value kosong pada dataset, karna value kosong nya sedikit sekali maka lebih baik di drop
df.isna().sum()

"""**4.1.2 Kolom Name**"""

# Melihat value unik pada kolom Nama/tidak perlu ada perbaikan
df['Name'].unique()

"""**4.1.3 Kolom No Of People Rated**

"""

# Melihat value unik pada kolom No Of People Rated/tidak perlu ada perbaikan
df['No of people Rated'].unique()

"""**4.1.4 Kolom Category**

"""

#Meliahat Value yang unik pada kolom category/tidak perlu ada perbaikan
df['Category'].unique()

"""**4.1.5 Kolom Date**"""

# #Meliahat Value yang unik pada kolom Date
df['Date'].unique()

# Menghapus simbol '-' pada kolom date
df['Date'] = df['Date'].str.replace('-', '')
# Mengubah tipe data kolom date menjadi int
df['Date'] = df['Date'].astype('int')

"""**4.1.6 Kolom Price**"""

# Meliahat Value yang unik pada kolom Price
df['Price'].unique()

# Menghapus simbol '₹'
df['Price'] = df['Price'].str.replace('₹', '')
# Menghapus simbol '.'
df['Price'] = df['Price'].str.replace('.', '')
# Menghapus space kosong
df['Price'] = df['Price'].str.replace(' ', '')
# Mengganti free menjadi 0
df['Price'] = df['Price'].str.replace('Free', '0')

# Cek kembali dataset nya untuk memastikan perubahan
df.tail(3)

# Menghapus kolom ',' pada kolom price
df['Price'] = df['Price'].str.replace(',', '')

# Setelah tidak ada simbol lain selain angka, ganti tipedata nya menjadi int
df['Price'] = df['Price'].astype('int')

# Melihat info dataset
df.info()

"""**4.2 Pembersihan data yang duplikat**"""

# Mencek data yang ada duplikat nya, hasil nya 0 jadi sudah benar
df.duplicated().sum()

"""**4.3 Visualisasi Data**"""

# Fungsi untuk plot distribusi data pada suatu kolom numerik
def plot_distribution(column:str, title:str):
  figures = px.histogram(data_frame=df,
                        x=column,
                        color='Price',
                        template='plotly_white',
                        marginal='box',
                        color_discrete_sequence=["#FF7171","#9FD8DF"],
                        barmode='overlay',
                        histfunc='count')

  figures.update_layout(font_family='Open Sans',
                        title=dict(text=title,
                                  x=0.5,
                                  font=dict(color="#333",size=20)),
                        hoverlabel=dict(bgcolor='white'))

  figures.update_xaxes(
      automargin=True
  )

  iplot(figures)

"""**4.3.1 Fitur Numerik**"""

# Menampilkan visualisasi data
for column in ["Rating","Date"]:
    plot_distribution(column=column, title=f"Distribusi fitur numerik pada kolom {column}")

# Menampilkan visualisasi data
for column in ["No of people Rated"]:
    plot_distribution(column=column, title=f"Distribusi fitur numerik pada kolom {column}")

"""**4.4 Restrukturisasi Data**"""

# Menyimpan nama-nama aplikasi pada dataframe baru
df_app_name = pd.DataFrame({'Name':df['Name']})
df_app_name.head()

# Menggunakan kolom aplikasi sebagai index
df.set_index('Name',inplace=True)
df.head()

# Memilih semua kolom dengan tipe data object
column_object = df.Category[df.Category == 'object'].keys()
column_object

"""**4.4.1 Konversi Label Category Dengan One Hot Encoding**"""

# Memilih semua kolom dengan tipe data object
column_object = df.dtypes[df.dtypes == 'object'].keys()
column_object

# Mengkonversi data kategori ke one-hot encoding
one_hot_label = pd.get_dummies(df[column_object])
one_hot_label.head(10)

# Menghapus kolom dengan tipe data object
df.drop(column_object,axis=1,inplace=True)
df.head()

# Menyatukan one hot encoding dengan data keseluruhan
df = pd.concat([df,one_hot_label],axis=1)
df.head()

"""**4.4.2 Menstandarkan label numerik pada dataset**"""

# Memilih semua kolom dengan tipe data integer
column_int = df.dtypes[df.dtypes == 'int64'].keys()
column_int

# Memilih semua kolom dengan tipe data float
column_float = df.dtypes[df.dtypes == 'float64'].keys()
column_float

# Menyatukan semua kolom dengan tipe data numerik
column_numeric = list(column_int) + list(column_float)
column_numeric

# inisiasi minmaxscaler
scaler = MinMaxScaler()

# Melakukan Standarisasi Data
scaled = scaler.fit_transform(df[column_numeric])

# mengganti data numerik pada dataset dengan data yang sudah di standarisasi
i=0
for column in column_numeric:
    df[column] = scaled[:,i]
    i += 1

# melihat data setelah di standarisasi
df.head()

# Inspeksi Data
df.describe()

"""# **5. Pembuatan Sistem Rekomendasi Content Based Filtering**

**5.1 Dengan model Nearest Neighbor (NN)**
"""

# Membuat sistem rekomendasi dengan model Nearest Neighbor
# Meninisiasi model 
model = NearestNeighbors(metric='euclidean')

# Melakukan fitting model terhadap data
model.fit(df)

# Membuat fungsi untuk mendapatkan rekomendasi
# Dengan model Nearest Neighbor
def getRecommendedApps(appname:str, recommend_apps:int=6):
  print(f'Apabila anda menyukai aplikasi {appname[0]}\nMungkin 5 aplikasi berikut menarik bagi anda :')
  # Mencari aplikasi terdekat dengan aplikasi yang disukai pengguna
  distances, neighbors = model.kneighbors(df.loc[appname],n_neighbors=recommend_apps)
  # Memasukkan aplikasi yang tinggi tingkat ke samaan nya ke dalam list
  similar_app = []
  for appname in df_app_name.loc[neighbors[0][:]].values:
    similar_app.append(appname[0])
  # Memasukan skornya (jarak) pada sebuah list
  similar_distance = []
  for distance in distances[0]:
    similar_distance.append(f"{round(100-distance, 2)}%")
  # Mengembalikan sebuah dataframe berupa rekomendasi terhadap aplikasinya
  hasil = pd.DataFrame(data = {"Nama Aplikasi" : similar_app, "Tingkat Kesamaan" : similar_distance})
  # karna baris pada row dengan label 0 adalah nama aplikasi yang kita cari, maka di drop di dataframe nya
  hasil = hasil.drop(labels=0, axis=0)
  return hasil

getRecommendedApps(df_app_name.loc[121])

"""**5.2 Dengan Cosine Similarity**"""

from sklearn.feature_extraction.text import TfidfVectorizer
 
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data cuisine
tf.fit(df_app_name['Name']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(df_app_name['Name']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan jenis aplikasi
# Baris diisi dengan nama aplikasi
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=df_app_name.Name
).sample(22, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity
 
# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama aplikasi
cosine_sim_df = pd.DataFrame(cosine_sim, index=df_app_name['Name'], columns=df_app_name['Name'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap aplikasi
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

# Menghitung cosine similarity pada dataframe
cosine_sim = cosine_similarity(df)

# Menyimpan hasil perhitungan pada dataframe
cosine_sim_df = pd.DataFrame(cosine_sim, index=df_app_name['Name'], columns=df_app_name['Name'])
cosine_sim_df.head(3)

# Membuat fungsi untuk mendapatkan rekomendasi Cosine Similarity
def getRecommendedApps_cosine(appname:str, recommended_apps:int=5):
  print(f'Apabila pengguna menyukai aplikasi {appname[0]}\n5 aplikasi berikut ini juga mungkin akan disukai :')
  # Mencari nilai unik pada aplikasi yang disukai pengguna di baris dataframe cosine sim
  # Nilai unik (arr) dikembalikan dalam bentuk yang berurutan dari kecil ke besar 
  arr, ind = np.unique(cosine_sim_df.loc[appname[0]], return_index=True)
  # Memasukkan nama aplikasi yang serupa dari index kedua terakhir sampai index n terakhir
  similar_app = []
  for index in ind[-(recommended_apps+1):-1]:
    similar_app.append(df_app_name.loc[index][0])
  # Memasukkan skor cosine dari aplikasi yang serupa mulai dari index kedua terakhir sampai index n terakhir
  cosine_score = []
  for score in arr[-(recommended_apps+1):-1]:
    cosine_score.append(score)
  # Mengembalikan sebuah dataframe berupa rekomendasi terhadap aplikasinya
  hasil_cosine = pd.DataFrame(data = {"Nama Aplikasi" : similar_app, "Cosine_Similarity" : cosine_score})
  hasil_cosine = hasil_cosine.set_index("Nama Aplikasi")
  hasil_cosine = hasil_cosine.sort_values("Cosine_Similarity", axis = 0, ascending = False, na_position ='last')
  return hasil_cosine

getRecommendedApps_cosine(df_app_name.loc[12])

"""# **6. Evaluasi Model Nearest Neighbor (NN)**

**6.1 Score Dari calinski harabasz score**
"""

calinski_harabasz_score(df, df_app_name)

"""# **Penutupan**

Model Machine Learning untuk memberikan rekomendasi aplikasi di windows app store telah berhasil di buat, setelah di uji dan di test untuk memberikan rekomendasi, model ini bekerja cukup baik karna data yang di rekomendasikan serupa dengan data yang kita cari, model ini masih bisa di kembangkan kedepan nya, seperti menggunakan deep learning.

**Referensi**

*   Dokumentasi Scikit-learn : https://scikit-learn.org/stable/modules/classes.html

*   Dokumentasi Plotly : https://plotly.com/python/
*   Dataset : https://www.kaggle.com/vishnuvarthanrao/windows-store
*   Lainya : https://www.kaggle.com/vishnuvarthanrao/windows-store/code
"""